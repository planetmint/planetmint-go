// Code generated by MockGen. DO NOT EDIT.
// Source: x/machine/keeper/register_nft.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/planetmint/planetmint-go/x/machine/types"
)

// MockIAssetServiceClient is a mock of IAssetServiceClient interface.
type MockIAssetServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAssetServiceClientMockRecorder
}

// MockIAssetServiceClientMockRecorder is the mock recorder for MockIAssetServiceClient.
type MockIAssetServiceClientMockRecorder struct {
	mock *MockIAssetServiceClient
}

// NewMockIAssetServiceClient creates a new mock instance.
func NewMockIAssetServiceClient(ctrl *gomock.Controller) *MockIAssetServiceClient {
	mock := &MockIAssetServiceClient{ctrl: ctrl}
	mock.recorder = &MockIAssetServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssetServiceClient) EXPECT() *MockIAssetServiceClientMockRecorder {
	return m.recorder
}

// IssueMachineNFT mocks base method.
func (m *MockIAssetServiceClient) IssueMachineNFT(goCtx context.Context, machine *types.Machine, scheme, domain, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueMachineNFT", goCtx, machine, scheme, domain, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueMachineNFT indicates an expected call of IssueMachineNFT.
func (mr *MockIAssetServiceClientMockRecorder) IssueMachineNFT(goCtx, machine, scheme, domain, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueMachineNFT", reflect.TypeOf((*MockIAssetServiceClient)(nil).IssueMachineNFT), goCtx, machine, scheme, domain, path)
}

// IssueNFTAsset mocks base method.
func (m *MockIAssetServiceClient) IssueNFTAsset(goCtx context.Context, name, machineAddress, domain string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueNFTAsset", goCtx, name, machineAddress, domain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssueNFTAsset indicates an expected call of IssueNFTAsset.
func (mr *MockIAssetServiceClientMockRecorder) IssueNFTAsset(goCtx, name, machineAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueNFTAsset", reflect.TypeOf((*MockIAssetServiceClient)(nil).IssueNFTAsset), goCtx, name, machineAddress, domain)
}

// RegisterAsset mocks base method.
func (m *MockIAssetServiceClient) RegisterAsset(goCtx context.Context, assetID, contract, assetRegistryEndpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAsset", goCtx, assetID, contract, assetRegistryEndpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAsset indicates an expected call of RegisterAsset.
func (mr *MockIAssetServiceClientMockRecorder) RegisterAsset(goCtx, assetID, contract, assetRegistryEndpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAsset", reflect.TypeOf((*MockIAssetServiceClient)(nil).RegisterAsset), goCtx, assetID, contract, assetRegistryEndpoint)
}
