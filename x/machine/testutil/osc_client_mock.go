// Code generated by MockGen. DO NOT EDIT.
// Source: x/machine/testutil/osc_client_interface.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	osc "github.com/crgimenes/go-osc"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockClient) Send(packet osc.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), packet)
}

// SetLocalAddr mocks base method.
func (m *MockClient) SetLocalAddr(ip string, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocalAddr", ip, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLocalAddr indicates an expected call of SetLocalAddr.
func (mr *MockClientMockRecorder) SetLocalAddr(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocalAddr", reflect.TypeOf((*MockClient)(nil).SetLocalAddr), ip, port)
}
