// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: planetmintgo/dao/distribution_order.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DistributionOrder struct {
	DaoAddr        string `protobuf:"bytes,1,opt,name=daoAddr,proto3" json:"daoAddr,omitempty"`
	DaoAmount      string `protobuf:"bytes,2,opt,name=daoAmount,proto3" json:"daoAmount,omitempty"`
	InvestorAddr   string `protobuf:"bytes,3,opt,name=investorAddr,proto3" json:"investorAddr,omitempty"`
	InvestorAmount string `protobuf:"bytes,4,opt,name=investorAmount,proto3" json:"investorAmount,omitempty"`
	PopAddr        string `protobuf:"bytes,5,opt,name=popAddr,proto3" json:"popAddr,omitempty"`
	PopAmount      string `protobuf:"bytes,6,opt,name=popAmount,proto3" json:"popAmount,omitempty"`
	FirstPop       uint64 `protobuf:"varint,7,opt,name=firstPop,proto3" json:"firstPop,omitempty"`
	LastPop        uint64 `protobuf:"varint,8,opt,name=lastPop,proto3" json:"lastPop,omitempty"`
	Proposer       string `protobuf:"bytes,9,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *DistributionOrder) Reset()         { *m = DistributionOrder{} }
func (m *DistributionOrder) String() string { return proto.CompactTextString(m) }
func (*DistributionOrder) ProtoMessage()    {}
func (*DistributionOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bd326325e0d716d, []int{0}
}
func (m *DistributionOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionOrder.Merge(m, src)
}
func (m *DistributionOrder) XXX_Size() int {
	return m.Size()
}
func (m *DistributionOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionOrder proto.InternalMessageInfo

func (m *DistributionOrder) GetDaoAddr() string {
	if m != nil {
		return m.DaoAddr
	}
	return ""
}

func (m *DistributionOrder) GetDaoAmount() string {
	if m != nil {
		return m.DaoAmount
	}
	return ""
}

func (m *DistributionOrder) GetInvestorAddr() string {
	if m != nil {
		return m.InvestorAddr
	}
	return ""
}

func (m *DistributionOrder) GetInvestorAmount() string {
	if m != nil {
		return m.InvestorAmount
	}
	return ""
}

func (m *DistributionOrder) GetPopAddr() string {
	if m != nil {
		return m.PopAddr
	}
	return ""
}

func (m *DistributionOrder) GetPopAmount() string {
	if m != nil {
		return m.PopAmount
	}
	return ""
}

func (m *DistributionOrder) GetFirstPop() uint64 {
	if m != nil {
		return m.FirstPop
	}
	return 0
}

func (m *DistributionOrder) GetLastPop() uint64 {
	if m != nil {
		return m.LastPop
	}
	return 0
}

func (m *DistributionOrder) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func init() {
	proto.RegisterType((*DistributionOrder)(nil), "planetmintgo.dao.DistributionOrder")
}

func init() {
	proto.RegisterFile("planetmintgo/dao/distribution_order.proto", fileDescriptor_2bd326325e0d716d)
}

var fileDescriptor_2bd326325e0d716d = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0xfd, 0xdb, 0xc6, 0x42, 0x08, 0x3c, 0x45, 0x08, 0x59, 0x55, 0x07, 0x54,
	0x06, 0x92, 0x81, 0x27, 0x00, 0xb1, 0x30, 0x81, 0x3a, 0xb2, 0xa0, 0x04, 0x87, 0x60, 0xa9, 0xf1,
	0xb5, 0xec, 0x1b, 0x04, 0x6f, 0xc1, 0x2b, 0xf0, 0x36, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xc8,
	0x36, 0x4d, 0x03, 0xdb, 0xfd, 0xce, 0x3d, 0xf7, 0xe8, 0xc8, 0xa6, 0xa7, 0x7a, 0x9d, 0xab, 0x12,
	0x6b, 0xa9, 0xb0, 0x82, 0x4c, 0xe4, 0x90, 0x09, 0x69, 0xd1, 0xc8, 0xa2, 0x41, 0x09, 0xea, 0x1e,
	0x8c, 0x28, 0x4d, 0xaa, 0x0d, 0x20, 0xb0, 0x83, 0xa1, 0x35, 0x15, 0x39, 0x2c, 0xde, 0x47, 0xf4,
	0xf0, 0x6a, 0x60, 0xbf, 0x71, 0x6e, 0x96, 0xd0, 0xa9, 0xc8, 0xe1, 0x42, 0x08, 0x93, 0x90, 0x39,
	0x59, 0xc6, 0xab, 0x2d, 0xb2, 0x63, 0x1a, 0xbb, 0xb1, 0x86, 0x46, 0x61, 0x32, 0xf2, 0xbb, 0x9d,
	0xc0, 0x16, 0x74, 0x4f, 0xaa, 0xe7, 0xd2, 0x22, 0x18, 0x7f, 0xfc, 0xcf, 0x1b, 0x7e, 0x69, 0xec,
	0x84, 0xee, 0xf7, 0x1c, 0x62, 0xc6, 0xde, 0xf5, 0x47, 0x75, 0x1d, 0x34, 0x68, 0x1f, 0xf3, 0x3f,
	0x74, 0xf8, 0x41, 0xd7, 0xc1, 0x8d, 0xe1, 0x78, 0x12, 0x3a, 0xf4, 0x02, 0x3b, 0xa2, 0xb3, 0x47,
	0x69, 0x2c, 0xde, 0x82, 0x4e, 0xa6, 0x73, 0xb2, 0x1c, 0xaf, 0x7a, 0x76, 0x99, 0xeb, 0x3c, 0xac,
	0x66, 0x7e, 0xb5, 0x45, 0x77, 0xa5, 0x0d, 0x68, 0xb0, 0xa5, 0x49, 0x62, 0x1f, 0xd9, 0xf3, 0xe5,
	0xf5, 0x47, 0xcb, 0xc9, 0xa6, 0xe5, 0xe4, 0xab, 0xe5, 0xe4, 0xad, 0xe3, 0xd1, 0xa6, 0xe3, 0xd1,
	0x67, 0xc7, 0xa3, 0xbb, 0xac, 0x92, 0xf8, 0xd4, 0x14, 0xe9, 0x03, 0xd4, 0xd9, 0xee, 0x69, 0x07,
	0xe3, 0x59, 0x05, 0xd9, 0x8b, 0xff, 0x13, 0x7c, 0xd5, 0xa5, 0x2d, 0x26, 0xfe, 0x1f, 0xce, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xca, 0x21, 0x53, 0xb2, 0xb4, 0x01, 0x00, 0x00,
}

func (m *DistributionOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LastPop != 0 {
		i = encodeVarintDistributionOrder(dAtA, i, uint64(m.LastPop))
		i--
		dAtA[i] = 0x40
	}
	if m.FirstPop != 0 {
		i = encodeVarintDistributionOrder(dAtA, i, uint64(m.FirstPop))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PopAmount) > 0 {
		i -= len(m.PopAmount)
		copy(dAtA[i:], m.PopAmount)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.PopAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PopAddr) > 0 {
		i -= len(m.PopAddr)
		copy(dAtA[i:], m.PopAddr)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.PopAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InvestorAmount) > 0 {
		i -= len(m.InvestorAmount)
		copy(dAtA[i:], m.InvestorAmount)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.InvestorAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InvestorAddr) > 0 {
		i -= len(m.InvestorAddr)
		copy(dAtA[i:], m.InvestorAddr)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.InvestorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DaoAmount) > 0 {
		i -= len(m.DaoAmount)
		copy(dAtA[i:], m.DaoAmount)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.DaoAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DaoAddr) > 0 {
		i -= len(m.DaoAddr)
		copy(dAtA[i:], m.DaoAddr)
		i = encodeVarintDistributionOrder(dAtA, i, uint64(len(m.DaoAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistributionOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributionOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributionOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DaoAddr)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	l = len(m.DaoAmount)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	l = len(m.InvestorAddr)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	l = len(m.InvestorAmount)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	l = len(m.PopAddr)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	l = len(m.PopAmount)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	if m.FirstPop != 0 {
		n += 1 + sovDistributionOrder(uint64(m.FirstPop))
	}
	if m.LastPop != 0 {
		n += 1 + sovDistributionOrder(uint64(m.LastPop))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovDistributionOrder(uint64(l))
	}
	return n
}

func sovDistributionOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributionOrder(x uint64) (n int) {
	return sovDistributionOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributionOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributionOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaoAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaoAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvestorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvestorAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPop", wireType)
			}
			m.FirstPop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPop", wireType)
			}
			m.LastPop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributionOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributionOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributionOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributionOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributionOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributionOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributionOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributionOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributionOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributionOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributionOrder = fmt.Errorf("proto: unexpected end of group")
)
