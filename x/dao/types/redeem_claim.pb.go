// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: planetmintgo/dao/redeem_claim.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RedeemClaim struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Beneficiary  string `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	LiquidTxHash string `protobuf:"bytes,3,opt,name=liquidTxHash,proto3" json:"liquidTxHash,omitempty"`
	Amount       string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Confirmed    bool   `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RedeemClaim) Reset()         { *m = RedeemClaim{} }
func (m *RedeemClaim) String() string { return proto.CompactTextString(m) }
func (*RedeemClaim) ProtoMessage()    {}
func (*RedeemClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_57a8f72ea08c516f, []int{0}
}
func (m *RedeemClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedeemClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedeemClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedeemClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemClaim.Merge(m, src)
}
func (m *RedeemClaim) XXX_Size() int {
	return m.Size()
}
func (m *RedeemClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemClaim.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemClaim proto.InternalMessageInfo

func (m *RedeemClaim) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RedeemClaim) GetBeneficiary() string {
	if m != nil {
		return m.Beneficiary
	}
	return ""
}

func (m *RedeemClaim) GetLiquidTxHash() string {
	if m != nil {
		return m.LiquidTxHash
	}
	return ""
}

func (m *RedeemClaim) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *RedeemClaim) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *RedeemClaim) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*RedeemClaim)(nil), "planetmintgo.dao.RedeemClaim")
}

func init() {
	proto.RegisterFile("planetmintgo/dao/redeem_claim.proto", fileDescriptor_57a8f72ea08c516f)
}

var fileDescriptor_57a8f72ea08c516f = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x50, 0x02, 0x75, 0x11, 0x42, 0x1e, 0x90, 0x07, 0x64, 0x45, 0x65, 0xc9, 0x42,
	0x32, 0xf0, 0x06, 0xb0, 0xc0, 0x1a, 0x31, 0xb1, 0x20, 0x27, 0x76, 0xd3, 0x93, 0x62, 0x5f, 0x70,
	0x1d, 0xa9, 0x7d, 0x0b, 0xde, 0x85, 0x97, 0x60, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x58, 0xa0,
	0x86, 0xed, 0xfe, 0xef, 0xbe, 0x1b, 0xee, 0xa7, 0xd7, 0x5d, 0x2b, 0xad, 0xf6, 0x06, 0xac, 0x6f,
	0xb0, 0x50, 0x12, 0x0b, 0xa7, 0x95, 0xd6, 0xe6, 0xa5, 0x6e, 0x25, 0x98, 0xbc, 0x73, 0xe8, 0x91,
	0x5d, 0x4c, 0xa5, 0x5c, 0x49, 0x5c, 0xbe, 0x13, 0xba, 0x28, 0x83, 0x78, 0xff, 0xe3, 0xb1, 0x73,
	0x1a, 0x83, 0xe2, 0x24, 0x25, 0xd9, 0xac, 0x8c, 0x41, 0xb1, 0x94, 0x2e, 0x2a, 0x6d, 0xf5, 0x0a,
	0x6a, 0x90, 0x6e, 0xc7, 0xe3, 0x94, 0x64, 0xf3, 0x72, 0x8a, 0xd8, 0x92, 0x9e, 0xb5, 0xf0, 0xda,
	0x83, 0x7a, 0xda, 0x3e, 0xc8, 0xcd, 0x9a, 0x1f, 0x05, 0xe5, 0x1f, 0x63, 0x97, 0x34, 0x91, 0x06,
	0x7b, 0xeb, 0xf9, 0x2c, 0x6c, 0x7f, 0x13, 0xbb, 0xa2, 0xf3, 0x1a, 0xed, 0x0a, 0x9c, 0xd1, 0x8a,
	0x1f, 0xa7, 0x24, 0x3b, 0x2d, 0x0f, 0x80, 0x71, 0x7a, 0x52, 0x3b, 0x2d, 0x3d, 0x3a, 0x9e, 0x84,
	0xb3, 0xbf, 0x78, 0xf7, 0xf8, 0x31, 0x08, 0xb2, 0x1f, 0x04, 0xf9, 0x1a, 0x04, 0x79, 0x1b, 0x45,
	0xb4, 0x1f, 0x45, 0xf4, 0x39, 0x8a, 0xe8, 0xb9, 0x68, 0xc0, 0xaf, 0xfb, 0x2a, 0xaf, 0xd1, 0x14,
	0x87, 0x67, 0x27, 0xe3, 0x4d, 0x83, 0xc5, 0x36, 0xf4, 0xe3, 0x77, 0x9d, 0xde, 0x54, 0x49, 0x68,
	0xe6, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x9a, 0xd2, 0xa6, 0x40, 0x01, 0x00, 0x00,
}

func (m *RedeemClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedeemClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedeemClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRedeemClaim(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Confirmed {
		i--
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintRedeemClaim(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LiquidTxHash) > 0 {
		i -= len(m.LiquidTxHash)
		copy(dAtA[i:], m.LiquidTxHash)
		i = encodeVarintRedeemClaim(dAtA, i, uint64(len(m.LiquidTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintRedeemClaim(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRedeemClaim(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedeemClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedeemClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedeemClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRedeemClaim(uint64(m.Id))
	}
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovRedeemClaim(uint64(l))
	}
	l = len(m.LiquidTxHash)
	if l > 0 {
		n += 1 + l + sovRedeemClaim(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovRedeemClaim(uint64(l))
	}
	if m.Confirmed {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRedeemClaim(uint64(l))
	}
	return n
}

func sovRedeemClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedeemClaim(x uint64) (n int) {
	return sovRedeemClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedeemClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedeemClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedeemClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedeemClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedeemClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedeemClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedeemClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedeemClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedeemClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedeemClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedeemClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedeemClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedeemClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedeemClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedeemClaim = fmt.Errorf("proto: unexpected end of group")
)
