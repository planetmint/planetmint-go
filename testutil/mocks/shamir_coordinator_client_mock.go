// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/shamir_coordinator_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rddl-network/shamir-coordinator-service/types"
)

// MockISCClient is a mock of ISCClient interface.
type MockISCClient struct {
	ctrl     *gomock.Controller
	recorder *MockISCClientMockRecorder
}

// MockISCClientMockRecorder is the mock recorder for MockISCClient.
type MockISCClientMockRecorder struct {
	mock *MockISCClient
}

// NewMockISCClient creates a new mock instance.
func NewMockISCClient(ctrl *gomock.Controller) *MockISCClient {
	mock := &MockISCClient{ctrl: ctrl}
	mock.recorder = &MockISCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISCClient) EXPECT() *MockISCClientMockRecorder {
	return m.recorder
}

// GetMnemonics mocks base method.
func (m *MockISCClient) GetMnemonics(ctx context.Context) (types.MnemonicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMnemonics", ctx)
	ret0, _ := ret[0].(types.MnemonicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMnemonics indicates an expected call of GetMnemonics.
func (mr *MockISCClientMockRecorder) GetMnemonics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMnemonics", reflect.TypeOf((*MockISCClient)(nil).GetMnemonics), ctx)
}

// IssueMachineNFT mocks base method.
func (m *MockISCClient) IssueMachineNFT(ctx context.Context, name, machineAddress, domain string) (types.IssueMachineNFTResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueMachineNFT", ctx, name, machineAddress, domain)
	ret0, _ := ret[0].(types.IssueMachineNFTResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueMachineNFT indicates an expected call of IssueMachineNFT.
func (mr *MockISCClientMockRecorder) IssueMachineNFT(ctx, name, machineAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueMachineNFT", reflect.TypeOf((*MockISCClient)(nil).IssueMachineNFT), ctx, name, machineAddress, domain)
}

// PostMnemonics mocks base method.
func (m *MockISCClient) PostMnemonics(ctx context.Context, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMnemonics", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMnemonics indicates an expected call of PostMnemonics.
func (mr *MockISCClientMockRecorder) PostMnemonics(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMnemonics", reflect.TypeOf((*MockISCClient)(nil).PostMnemonics), ctx, secret)
}

// ReIssueAsset mocks base method.
func (m *MockISCClient) ReIssueAsset(ctx context.Context, asset, amount string) (types.ReIssueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReIssueAsset", ctx, asset, amount)
	ret0, _ := ret[0].(types.ReIssueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReIssueAsset indicates an expected call of ReIssueAsset.
func (mr *MockISCClientMockRecorder) ReIssueAsset(ctx, asset, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReIssueAsset", reflect.TypeOf((*MockISCClient)(nil).ReIssueAsset), ctx, asset, amount)
}

// SendTokens mocks base method.
func (m *MockISCClient) SendTokens(ctx context.Context, recipient, amount, asset string) (types.SendTokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTokens", ctx, recipient, amount, asset)
	ret0, _ := ret[0].(types.SendTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTokens indicates an expected call of SendTokens.
func (mr *MockISCClientMockRecorder) SendTokens(ctx, recipient, amount, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTokens", reflect.TypeOf((*MockISCClient)(nil).SendTokens), ctx, recipient, amount, asset)
}
